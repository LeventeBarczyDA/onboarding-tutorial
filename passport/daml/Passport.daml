module Passport where 

import DA.Optional (fromOptional)

import PassportData

template Passport 
  with 
    investor: Party 
    provider: Party 
    verifier: Party 

    expires: Time

  where 
    signatory investor, provider, verifier 

    key (provider, investor): (Party, Party)
    maintainer key._1

template Support 
  with 
    investor: Party  
    provider: Party 
    verifier: Party 

    granted: Time
    renewed: Time
    warning: Time 
    expires: Time 
    fields: OnboardingFields 
  where 
    signatory investor, provider, verifier 
    ensure renewed < warning && warning < expires 

    choice WarnInvestor: ContractId DocumentationRequest 
        with 
          prompt: Text
      controller provider 
        do 
          now <- getTime 
          --assertMsg "Can only warn within warning window" (warning < now)
          create DocumentationRequest 
            with 
              originalGranted = Some granted
              existingFields = Some fields
              ..

template PassportRequest 
  with 
    investor: Party 
    provider: Party 
  where 
    signatory investor 
    observer provider

    choice RequestDocumentation: ContractId DocumentationRequest 
        with 
          verifier: Party 
          prompt: Text 
          expires: Time
          
      controller provider 
        do 
          now <- getTime
          create DocumentationRequest 
            with 
              originalGranted = None
              warning = now
              existingFields = None
              ..

template DocumentationRequest 
  with 
    investor: Party 
    provider: Party 
    prompt: Text 
    verifier: Party 

    originalGranted: Optional Time
    warning: Time 
    expires: Time 
    existingFields: Optional OnboardingFields 
  where 
    signatory investor, provider 

    choice UploadDocuments: ContractId ReviewRequest 
        with 
          fields: OnboardingFields 
      controller investor 
        do 
          create ReviewRequest with .. 
          -- Trifurcate workflow based on KYC (trulio), AML (custodian), Verified cred (trinsic) 

template ReviewRequest 
  with 
    investor: Party 
    provider: Party 
    prompt: Text 
    verifier: Party 
    fields: OnboardingFields
    originalGranted: Optional Time
  where 
    signatory investor, provider 
    observer verifier

    choice Trifurcate: (ContractId ReviewRequestSync, ContractId KycRequest, ContractId AmlRequest, ContractId CredRequest)
        with 
          kycReviewer: Party 
          amlReviewer: Party 
          credReviewer: Party
          syncId: Text
      controller verifier 
        do 
          kycRequest <- create KycRequest with ..
          amlRequest <- create AmlRequest with .. 
          credRequest <- create CredRequest with ..

          sync <- create ReviewRequestSync with ..

          return (sync, kycRequest, amlRequest, credRequest)


template KycRequest 
  with 
    investor: Party 
    provider: Party 
    prompt: Text 
    verifier: Party 
    fields: OnboardingFields
    originalGranted: Optional Time
    kycReviewer: Party 
    syncId: Text
  where 
    signatory investor, provider, verifier
    observer kycReviewer

    choice ApproveKyc: ContractId ApprovedKycRequest
      controller kycReviewer 
        do 
          create ApprovedKycRequest with ..

template ApprovedKycRequest 
  with 
    investor: Party 
    provider: Party 
    prompt: Text 
    verifier: Party 
    fields: OnboardingFields
    originalGranted: Optional Time
    kycReviewer: Party 
    syncId: Text
  where 
    signatory investor, provider, kycReviewer, verifier

    key (verifier, investor, syncId): (Party, Party, Text)
    maintainer key._1

    choice ArchiveKycRequest: () 
      controller verifier 
        do pure ()

template AmlRequest 
  with 
    investor: Party 
    provider: Party 
    prompt: Text 
    verifier: Party 
    fields: OnboardingFields
    originalGranted: Optional Time
    amlReviewer: Party 
    syncId: Text
  where 
    signatory investor, provider, verifier
    observer amlReviewer

    choice ApproveAml: ContractId ApprovedAmlRequest
      controller amlReviewer 
        do 
          create ApprovedAmlRequest with ..

template ApprovedAmlRequest 
  with 
    investor: Party 
    provider: Party 
    prompt: Text 
    verifier: Party 
    fields: OnboardingFields
    originalGranted: Optional Time
    amlReviewer: Party 
    syncId: Text
  where 
    signatory investor, provider, amlReviewer, verifier

    key (verifier, investor, syncId): (Party, Party, Text)
    maintainer key._1

    choice ArchiveAmlRequest: () 
      controller verifier 
        do pure ()

template CredRequest 
  with 
    investor: Party 
    provider: Party 
    prompt: Text 
    verifier: Party 
    fields: OnboardingFields
    originalGranted: Optional Time
    credReviewer: Party 
    syncId: Text
  where 
    signatory investor, provider, verifier
    observer credReviewer

    choice ApproveCred: ContractId ApprovedCredRequest
      controller credReviewer 
        do 
          create ApprovedCredRequest with ..

template ApprovedCredRequest 
  with 
    investor: Party 
    provider: Party 
    prompt: Text 
    verifier: Party 
    fields: OnboardingFields
    originalGranted: Optional Time
    credReviewer: Party 
    syncId: Text
  where 
    signatory investor, provider, credReviewer, verifier

    key (verifier, investor, syncId): (Party, Party, Text)
    maintainer key._1

    choice ArchiveCredRequest: () 
      controller verifier 
        do pure ()

template ReviewRequestSync 
  with 
    investor: Party 
    provider: Party 
    prompt: Text 
    verifier: Party 
    fields: OnboardingFields
    originalGranted: Optional Time
    credReviewer: Party 
    syncId: Text
  where 
    signatory investor, provider, verifier 

    choice ApproveRequest: (ContractId Passport, ContractId Support)
      with 
        warning: Time 
        expires: Time 
      controller verifier
        do 
          exerciseByKey @ApprovedKycRequest (verifier, investor, syncId) ArchiveKycRequest 
          exerciseByKey @ApprovedAmlRequest (verifier, investor, syncId) ArchiveAmlRequest 
          exerciseByKey @ApprovedCredRequest (verifier, investor, syncId) ArchiveCredRequest 

          now <- getTime
          passport <- do 
            passportLookup <- lookupByKey @Passport (provider, investor) 
            case passportLookup of 
              Some p -> pure p 
              None -> create Passport with .. 
          support <- create Support 
            with 
              granted = fromOptional now originalGranted
              renewed = now
              ..
          return (passport, support)